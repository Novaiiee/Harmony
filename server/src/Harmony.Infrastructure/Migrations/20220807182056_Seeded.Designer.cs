// <auto-generated />
using System;
using Harmony.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Harmony.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220807182056_Seeded")]
    partial class Seeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActivityJournalEntry", b =>
                {
                    b.Property<string>("ActivitiesId")
                        .HasColumnType("text");

                    b.Property<string>("JournalEntriesId")
                        .HasColumnType("text");

                    b.HasKey("ActivitiesId", "JournalEntriesId");

                    b.HasIndex("JournalEntriesId");

                    b.ToTable("ActivityJournalEntry");
                });

            modelBuilder.Entity("FeelingJournalEntry", b =>
                {
                    b.Property<string>("FeelingsId")
                        .HasColumnType("text");

                    b.Property<string>("JournalEntriesId")
                        .HasColumnType("text");

                    b.HasKey("FeelingsId", "JournalEntriesId");

                    b.HasIndex("JournalEntriesId");

                    b.ToTable("FeelingJournalEntry");
                });

            modelBuilder.Entity("Harmony.Domain.Entities.Activity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("00000000-0000-0000-0000-000000000000");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = "5d1a6c66-26e3-442c-889c-4508e4f3b2c7",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Being With Family",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "16bde70d-2750-4736-9042-defbb3886238",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Friends",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "f5001776-824d-42d4-b090-34b76cde980c",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Going on a Date",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "714a919c-7109-4adf-ae14-7467a25ce6db",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Being with Friends",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "971ee79e-fb0c-4e2c-a9f3-3f5e24754ad4",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Exercising",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "6e0d9512-44e2-4918-bc0c-96a78d945d76",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Sports",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "a5923265-4983-4624-9c79-88a74f373d0d",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Relaxing",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "cf45459c-1169-495d-a2cc-4e89dccf9e2d",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Watching Movies",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "3e22b535-1037-473b-97a0-972e559abc28",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Reading",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "f2bcc66e-50b2-405c-92dc-9c4a56c70d47",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Gaming",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "d0364dc1-812f-4158-8458-7a1fc945db35",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Cleaning",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "9b4326f4-903f-4802-b463-f6eae2b8546a",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Shopping",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "65b3c00c-8781-49f0-a694-9d2a427f2f51",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Eating Healthy",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("Harmony.Domain.Entities.Feeling", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("00000000-0000-0000-0000-000000000000");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.HasKey("Id");

                    b.ToTable("Feelings");

                    b.HasData(
                        new
                        {
                            Id = "df303b09-2867-44e8-9193-fa891a563610",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Happy",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "976f9451-6cf9-48d6-823c-b22a0aa88943",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Blessed",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "166831c0-43a5-4810-ae5a-4b1ce0441377",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Good",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "c088f5ed-b84b-4759-a0e5-fda6477448bf",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Confused",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "0705f1aa-59b4-4235-a737-637c6a7f5a06",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Bored",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "2eb3fa36-0ce7-42b4-a6dc-7b40b63d8a0a",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Awkward",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "046c5fc9-9646-4807-801a-6a52e15f8985",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Angry",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "0a2bc7a7-c5de-44b9-93a4-a57728e6d9e1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Anxious",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "a41d6f33-1451-4918-b527-b4cde06ebf01",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Down",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "6c921675-5f30-4d34-91e9-0fe6725d8da0",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Stressed",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("Harmony.Domain.Entities.JournalEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("00000000-0000-0000-0000-000000000000");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MoodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("Harmony.Domain.Entities.Mood", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("00000000-0000-0000-0000-000000000000");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(NodaTime.Instant.FromUnixTimeTicks(0L));

                    b.HasKey("Id");

                    b.ToTable("Moods");

                    b.HasData(
                        new
                        {
                            Id = "2187b64d-3e63-4841-9743-e9abbf80130c",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Terrible",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "8f3bc7e6-2514-48ee-b1e5-748513a6c070",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Bad",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "78f9ea9a-f403-480e-a2e5-c9abd27aa594",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Okay",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "d239b2c6-d81f-41ff-a690-f1caf1f84bd1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Good",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = "f39d9c69-952f-4ce5-a646-1a48cbcef9c1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Awesome",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("Harmony.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ActivityJournalEntry", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Harmony.Domain.Entities.JournalEntry", null)
                        .WithMany()
                        .HasForeignKey("JournalEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeelingJournalEntry", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.Feeling", null)
                        .WithMany()
                        .HasForeignKey("FeelingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Harmony.Domain.Entities.JournalEntry", null)
                        .WithMany()
                        .HasForeignKey("JournalEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Harmony.Domain.Entities.JournalEntry", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.Mood", "Mood")
                        .WithMany("JournalEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Harmony.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Harmony.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Harmony.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Harmony.Domain.Entities.Mood", b =>
                {
                    b.Navigation("JournalEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
